@page "/"
@* 
<PageTitle>Dashboard Financeiro</PageTitle>
<MudContainer MaxWidth="MaxWidth.False" Class="mt-4" Style="height: 80vh; overflow-y: auto;" Id="dashboardScrollContainer">
    <MudScrollToTop TopOffset="100"
                    OnScroll="OnContainerScroll"
                    Selector="#dashboardScrollContainer"
                    VisibleCssClass="visible"
                    HiddenCssClass="invisible">
        <MudButton Variant="Variant.Filled"
                   StartIcon="@Icons.Material.Filled.ArrowUpward"
                   Color="@scrollButtonColor"
                   Class="mud-button-scroll-top">
            Voltar ao topo
        </MudButton>
    </MudScrollToTop>
    <MudText Typo="Typo.h4" Class="mb-4">Dashboard - Despesas Fixas</MudText>
    <div class="d-flex flex-row-reverse flex-grow-1 gap-4">

    <!-- Gráfico 1: Evolução das Despesas Fixas -->
    <MudPaper Elevation="4" Class="pa-4 mb-4" Width="30%">
        <MudText Typo="Typo.h6" Class="mb-3">Evolução Mensal das Despesas</MudText>
        <MudChart ChartType="ChartType.Line"
                  ChartSeries="@DespesasSeries"
                  XAxisLabels="@Meses"
                  Width="100%"
                  ChartOptions="@optionsDespesas">
        </MudChart>
    </MudPaper>

    <!-- Gráfico 2: Acúmulo de Juros -->
    <MudPaper Elevation="4" Class="pa-4 mb-4" Width="30%">
        <MudText Typo="Typo.h6" Class="mb-3">Acúmulo de Juros por Despesa</MudText>
        <MudChart ChartType="ChartType.Line"
                  ChartSeries="@JurosSeries"
                  XAxisLabels="@Meses"
                  Width="100%"                 
                  ChartOptions="@optionsJuros">
        </MudChart>
    </MudPaper>
    </div>
    <!-- Tabela de Dados -->
    <MudPaper Elevation="4" Class="pa-4">
        <MudText Typo="Typo.h6" Class="mb-3">Detalhes das Despesas</MudText>
        <MudTable Items="@Despesas" Hover="true" Breakpoint="Breakpoint.Sm" FixedHeader="true" Height="400px">
            <HeaderContent>
                <MudTh>Despesa</MudTh>
                <MudTh>Valor (R$)</MudTh>
                <MudTh>Juros (R$)</MudTh>
                <MudTh>Total (R$)</MudTh>
                <MudTh>Status</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.DespesaNome</MudTd>
                <MudTd>@context.Valor.ToString("N2")</MudTd>
                <MudTd>@context.Juros.ToString("N2")</MudTd>
                <MudTd>@((context.Valor + context.Juros).ToString("N2"))</MudTd>
                <MudTd>
                    <MudChip T="string" Class="text-white"
                             Color="@(GetStatusText(context).Equals("Pago")?Color.Success
                                : GetStatusText(context).Equals("Atrasado")
                                ? Color.Error:Color.Warning)">
                        @GetStatusText(context)
                    </MudChip>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudPaper>
</MudContainer>

@code {
    private Color scrollButtonColor = Color.Primary;

    private void OnContainerScroll(ScrollEventArgs e)
    {
        // Você pode adicionar lógica aqui para mudar o botão conforme o scroll
        scrollButtonColor = e.FirstChildBoundingClientRect.Top < -500 ? Color.Secondary : Color.Primary;
    }

    // Dados básicos
    private List<Despesa> Despesas = new List<Despesa>();
    private string[] Meses = { "Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul" };
    private string[] textFunc = { "despesas", "juros" };

    // Configurações dos gráficos
    private ChartOptions optionsDespesas = new();
    private ChartOptions optionsJuros = new();
    private List<ChartSeries> DespesasSeries = new();
    private List<ChartSeries> JurosSeries = new();
    private Random random = new();

    protected override void OnInitialized()
    {
        // Inicializa as despesas fixas
        Despesas = new List<Despesa>
        {
            new Despesa { DespesaID = 1, DespesaNome = "Água", Valor = 120, Juros = 15, Pago = false, DespesaAtrasada = true },
            new Despesa { DespesaID = 2, DespesaNome = "Luz", Valor = 250, Juros = 30, Pago = true, DespesaAtrasada = false },
            new Despesa { DespesaID = 3, DespesaNome = "Internet", Valor = 150, Juros = 0, Pago = false, DespesaAtrasada = false },
            new Despesa { DespesaID = 4, DespesaNome = "Telefone", Valor = 250, Juros = 45, Pago = false, DespesaAtrasada = true },
            new Despesa { DespesaID = 5, DespesaNome = "Gás", Valor = 250, Juros = 0, Pago = true, DespesaAtrasada = false },
            new Despesa { DespesaID = 6, DespesaNome = "Condomínio", Valor = 360, Juros = 72, Pago = false, DespesaAtrasada = true }
        };

        // Configura os gráficos
        ConfigurarGraficoDespesas();
        ConfigurarGraficoJuros();
    }

    private void ConfigurarGraficoDespesas()
    {
        optionsDespesas = new ChartOptions
        {
            InterpolationOption = InterpolationOption.NaturalSpline,
            YAxisFormat = "c0",
            YAxisLines = true
        };

        DespesasSeries = new List<ChartSeries>
        {
            new ChartSeries { Name = "Água", Data = new double[] { 110, 115, 118, 120, 122, 120, 120 } },
            new ChartSeries { Name = "Luz", Data = new double[] { 220, 230, 240, 250, 245, 250, 250 } },
            new ChartSeries { Name = "Internet", Data = new double[] { 150, 150, 150, 150, 150, 150, 150 } },
            new ChartSeries { Name = "Condomínio", Data = new double[] { 350, 355, 358, 360, 362, 360, 360 } }
        };
    }

    private void ConfigurarGraficoJuros()
    {
        optionsJuros = new ChartOptions
        {
            InterpolationOption = InterpolationOption.Straight,
            YAxisFormat = "c0",
            YAxisLines = true
        };

        JurosSeries = new List<ChartSeries>
        {
            new ChartSeries { Name = "Juros Água", Data = new double[] { 0, 0, 5, 10, 12, 15, 15 } },
            new ChartSeries { Name = "Juros Luz", Data = new double[] { 0, 10, 15, 20, 25, 30, 30 } },
            new ChartSeries { Name = "Juros Telefone", Data = new double[] { 0, 15, 25, 35, 40, 45, 45 } },
            new ChartSeries { Name = "Juros Condomínio", Data = new double[] { 0, 20, 35, 50, 60, 72, 72 } }
        };
    }

    private void AtualizarDadosDespesas()
    {
        foreach (var series in DespesasSeries)
        {
            for (int i = 0; i < series.Data.Length; i++)
            {
                // Variação de ±5% no valor
                double variacao = (random.NextDouble() * 0.1) - 0.05;
                series.Data[i] = Math.Round(series.Data[i] * (1 + variacao), 2);
            }
        }
        StateHasChanged();
    }

    private void OnClickMenu(InterpolationOption option, string tipoGrafico)
    {
        if (tipoGrafico == "despesas")
        {
            optionsDespesas.InterpolationOption = option;
        }
        else
        {
            optionsJuros.InterpolationOption = option;
        }
        StateHasChanged();
    }

    private Color GetStatusColor(Despesa despesa)
    {
        return despesa.Pago ? Color.Success : 
               despesa.DespesaAtrasada ? Color.Error : Color.Warning;
    }

    private string GetStatusText(Despesa despesa)
    {
        return despesa.Pago ? "Pago" : 
               despesa.DespesaAtrasada ? "Atrasado" : "Pendente";
    }
} *@

@* <PageTitle>Dashboard</PageTitle>

<MudContainer MaxWidth="MaxWidth.False" Class="mt-4">
    <MudText Typo="Typo.h4" Class="mb-2">Dashboard Financeiro</MudText>

    <MudPaper Elevation="4" Class="pa-4">
        <MudText Typo="Typo.h6" Class="mb-2">Resumo da Semana</MudText>

        <MudChart ChartType="ChartType.Line"
                  ChartSeries="@Series"
                  XAxisLabels="@XAxisLabels"
                  Height="350"
                  ChartOptions="@options" />

        <MudDivider Class="my-4" />

        <MudText Typo="Typo.subtitle2">Última atualização: @LastUpdated.ToString("dd/MM/yyyy HH:mm:ss")</MudText>
    </MudPaper>
</MudContainer>

@code {
    private List<ChartSeries> Series = new();
    private string[] XAxisLabels = Array.Empty<string>();
    private ChartOptions options = new();
    private DateTime LastUpdated;

    protected override void OnInitialized()
    {
        CarregarGraficoFinanceiro();
    }

    private void CarregarGraficoFinanceiro()
    {
        // Dias da semana
        XAxisLabels = new[] { "Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "Sáb" };

        // Dados simulados (valores em reais)
        var contasPagas = new double[] { 500, 750, 620, 800, 900, 1020, 880 };
        var contasAtraso = new double[] { 100, 120, 90, 110, 130, 150, 160 };
        var contasAVencer = new double[] { 400, 300, 350, 280, 270, 310, 290 };

        Series = new List<ChartSeries>
        {
            new ChartSeries { Name = "Contas Pagas", Data = contasPagas },
            new ChartSeries { Name = "Contas em Atraso", Data = contasAtraso },
            new ChartSeries { Name = "Contas a Vencer", Data = contasAVencer }
        };

        options = new ChartOptions
            {
                InterpolationOption = InterpolationOption.NaturalSpline,
                YAxisFormat = "c0" // formato de moeda sem centavos
            };

        LastUpdated = DateTime.Now;
    }
} *@